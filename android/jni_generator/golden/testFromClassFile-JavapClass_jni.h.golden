// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/example/jni_generator/JavapClass

#ifndef org_chromium_example_jni_generator_JavapClass_JNI
#define org_chromium_example_jni_generator_JavapClass_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_example_jni_1generator_JavapClass[];
const char kClassPath_org_chromium_example_jni_1generator_JavapClass[] =
    "org/chromium/example/jni_generator/JavapClass";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_example_jni_1generator_JavapClass_clazz(nullptr);
#ifndef org_chromium_example_jni_1generator_JavapClass_clazz_defined
#define org_chromium_example_jni_1generator_JavapClass_clazz_defined
inline jclass org_chromium_example_jni_1generator_JavapClass_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_example_jni_1generator_JavapClass,
      &g_org_chromium_example_jni_1generator_JavapClass_clazz);
}
#endif


// Step 2: Constants (optional).

namespace JNI_JavapClass {

enum Java_JavapClass_constant_fields {
  CONST_INT = 3,
};


}  // namespace JNI_JavapClass
// Step 3: Method stubs.
namespace JNI_JavapClass {


static std::atomic<jmethodID>
    g_org_chromium_example_jni_1generator_JavapClass_ConstructorOCEJJC(nullptr);
[[maybe_unused]] static base::android::ScopedJavaLocalRef<jobject>
    Java_JavapClass_ConstructorOCEJJC(JNIEnv* env);
static base::android::ScopedJavaLocalRef<jobject> Java_JavapClass_ConstructorOCEJJC(JNIEnv* env) {
  jclass clazz = org_chromium_example_jni_1generator_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_example_jni_1generator_JavapClass_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "()V",
          &g_org_chromium_example_jni_1generator_JavapClass_ConstructorOCEJJC);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_example_jni_1generator_JavapClass_ConstructorOCEJJC_I(nullptr);
[[maybe_unused]] static base::android::ScopedJavaLocalRef<jobject>
    Java_JavapClass_ConstructorOCEJJC_I(JNIEnv* env, JniIntWrapper p0);
static base::android::ScopedJavaLocalRef<jobject> Java_JavapClass_ConstructorOCEJJC_I(JNIEnv* env,
    JniIntWrapper p0) {
  jclass clazz = org_chromium_example_jni_1generator_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_example_jni_1generator_JavapClass_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(I)V",
          &g_org_chromium_example_jni_1generator_JavapClass_ConstructorOCEJJC_I);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, as_jint(p0));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_example_jni_1generator_JavapClass_intMethod(nullptr);
[[maybe_unused]] static jint Java_JavapClass_intMethod(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& p0);
static jint Java_JavapClass_intMethod(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jstring>& p0) {
  jclass clazz = org_chromium_example_jni_1generator_JavapClass_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_example_jni_1generator_JavapClass_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "intMethod",
          "(Ljava/lang/String;)I",
          &g_org_chromium_example_jni_1generator_JavapClass_intMethod);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_example_jni_1generator_JavapClass_staticIntMethodAI_JLS(nullptr);
[[maybe_unused]] static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_JavapClass_staticIntMethodAI_JLS(JNIEnv* env, const base::android::JavaRef<jstring>& p0);
static base::android::ScopedJavaLocalRef<jobjectArray> Java_JavapClass_staticIntMethodAI_JLS(JNIEnv*
    env, const base::android::JavaRef<jstring>& p0) {
  jclass clazz = org_chromium_example_jni_1generator_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_example_jni_1generator_JavapClass_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "staticIntMethod",
          "(Ljava/lang/String;)[[I",
          &g_org_chromium_example_jni_1generator_JavapClass_staticIntMethodAI_JLS);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, p0.obj()));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_example_jni_1generator_JavapClass_staticIntMethodI_JLS_OCEJJC(nullptr);
[[maybe_unused]] static jint Java_JavapClass_staticIntMethodI_JLS_OCEJJC(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0,
    const base::android::JavaRef<jobject>& p1);
static jint Java_JavapClass_staticIntMethodI_JLS_OCEJJC(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0,
    const base::android::JavaRef<jobject>& p1) {
  jclass clazz = org_chromium_example_jni_1generator_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_example_jni_1generator_JavapClass_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "staticIntMethod",
          "(Ljava/lang/String;Lorg/chromium/example/jni_generator/JavapClass;)I",
          &g_org_chromium_example_jni_1generator_JavapClass_staticIntMethodI_JLS_OCEJJC);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, p0.obj(), p1.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_example_jni_1generator_JavapClass_objTest(nullptr);
[[maybe_unused]] static base::android::ScopedJavaLocalRef<jclass> Java_JavapClass_objTest(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0,
    const base::android::JavaRef<jobjectArray>& p1);
static base::android::ScopedJavaLocalRef<jclass> Java_JavapClass_objTest(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& p0,
    const base::android::JavaRef<jobjectArray>& p1) {
  jclass clazz = org_chromium_example_jni_1generator_JavapClass_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_example_jni_1generator_JavapClass_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "objTest",
          "(Ljava/lang/Object;[Ljava/lang/Runnable;)Ljava/lang/Class;",
          &g_org_chromium_example_jni_1generator_JavapClass_objTest);

  jclass ret =
      static_cast<jclass>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj(), p1.obj()));
  return base::android::ScopedJavaLocalRef<jclass>(env, ret);
}

}  // namespace JNI_JavapClass

#endif  // org_chromium_example_jni_generator_JavapClass_JNI
